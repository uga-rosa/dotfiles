[[plugins]]
repo = 'Shougo/ddu.vim'
lua_add = '''
    local ddu = require("rc.ddu")

    local lines = vim.opt.lines:get()
    local height, row = math.floor(lines * 0.8), math.floor(lines * 0.1)
    local columns = vim.opt.columns:get()
    local width, col = math.floor(columns * 0.8), math.floor(columns * 0.1)

    local palette = require("nightfly").palette
    vim.api.nvim_set_hl(0, "DduSearchMatched", { fg = palette.black, bg = palette.emerald })

    vim.fn["ddu#custom#patch_global"]({
      ui = "ff",
      uiParams = {
        ff = {
          startFilter = true,
          prompt = "> ",
          split = "floating",
          winHeight = height,
          winRow = row,
          winWidth = width,
          winCol = col,
          floatingBorder = "single",
          filterFloatingPosition = "top",
          autoAction = {
            name = "preview",
          },
          previewFloating = true,
          previewFloatingBorder = "single",
          previewSplit = "vertical",
          previewFloatingTitle = "Preview",
          previewWidth = math.floor(width / 2),
          highlights = {
            floating = "Normal",
            floatingBorder = "Normal",
          },
        },
      },
      sourceOptions = {
        _ = {
          ignoreCase = true,
          matchers = { "matcher_fzf" },
          converters = { "converter_devicon" },
        },
      },
      kindOptions = {
        _ = {
          defaultAction = "open",
        },
        command_history = {
          defaultAction = "execute",
        },
        search_history = {
          defaultAction = "execute",
        },
      },
      filterParams = {
        matcher_fzf = {
          highlightMatched = "DduSearchMatched",
        },
      },
    })

    local function map(mode, lhs, rhs)
      vim.keymap.set(mode, lhs, rhs, { buffer = true, silent = true, nowait = true })
    end

    vim.api.nvim_create_autocmd("FileType", {
      pattern = "ddu-ff",
      callback = function()
        -- Highlight cursor line
        vim.opt_local.cursorline = true
        -- Close UI
        map("n", "<Esc>", ddu.call_action("quit"))
        -- Open file
        map("n", "<CR>", ddu.itemAction("default"))
        map("n", "<C-x>", ddu.itemAction("open", { command = "split" }))
        map("n", "<C-v>", ddu.itemAction("open", { command = "vsplit" }))
        map("n", "<C-t>", ddu.open_tab)
        -- Enter filter
        map("n", "i", ddu.call_action("openFilterWindow"))
      end,
    })

    vim.api.nvim_create_autocmd("FileType", {
      pattern = "ddu-ff-filter",
      callback = function()
        -- Close UI
        map("i", "<C-c>", ddu.call_action("quit"))
        map("n", "<Esc>", ddu.call_action("quit"))
        -- Close filter window
        -- Lexima overwrite <Esc> mapping
        vim.b.lexima_disabled = true
        map("i", "<Esc>", function()
          ddu.call_action("closeFilterWindow")()
          vim.cmd.stopinsert()
        end)
        -- Open file
        map("i", "<CR>", ddu.itemAction("default"))
        map("i", "<C-x>", ddu.itemAction("open", { command = "split" }))
        map("i", "<C-v>", ddu.itemAction("open", { command = "vsplit" }))
        map("i", "<C-t>", ddu.open_tab)
        -- Move cursor
        map("i", "<C-n>", ddu.execute("normal! j"))
        map("i", "<C-p>", ddu.execute("normal! k"))
      end,
    })

    vim.api.nvim_create_user_command("Ddu", function(args)
      local subcommand = args.args
      local f = require("ddu_command")[subcommand]
      if f then
        f()
      else
        vim.notify("Unknown subcommand: " .. subcommand)
      end
    end, {
      nargs = 1,
      complete = function()
        return vim.tbl_keys(require("ddu_command"))
      end,
    })
'''

# UI
[[plugins]]
repo = 'Shougo/ddu-ui-ff'

# Sources
[[plugins]]
repo = 'matsui54/ddu-source-file_external'
lua_add = '''
    vim.keymap.set("n", "<Space>f", "<Cmd>Ddu files<CR>")

    require("rc.utils").package_set("ddu_command", "files", function()
      require("rc.ddu").start({
        {
          name = "file_external",
          params = {
            cmd = {
              "fd",
              "--type",
              "f",
              "--color",
              "never",
              "--hidden",
              "--follow",
              "--exclude",
              ".git",
            },
          },
        },
      })
    end)
'''

[[plugins]]
repo = 'shun/ddu-source-rg'
lua_add = '''
    vim.keymap.set("n", "<Space>lg", "<Cmd>Ddu live_grep<CR>")

    require("rc.utils").package_set("ddu_command", "live_grep", function()
      require("rc.ddu").start({
        "rg",
        sourceOptions = {
          rg = {
            volatile = true,
            matchers = {},
          },
        },
      })
    end)
'''

[[plugins]]
repo = 'matsui54/ddu-source-help'
lua_add = '''
    vim.keymap.set("n", "<Space>h", "<Cmd>Ddu help_tags<CR>")

    require("rc.utils").package_set("ddu_command", "help_tags", function()
      require("rc.ddu").start({ "help" })
    end)
'''

[[plugins]]
repo = 'kuuote/ddu-source-mr'
lua_add = '''
    vim.keymap.set("n", "<Space>w", "<Cmd>Ddu mrw<CR>")
    vim.keymap.set("n", "<Space>u", "<Cmd>Ddu mru<CR>")

    require("rc.utils").package_set("ddu_command", "mru", function()
      require("rc.ddu").start({
        {
          name = "mr",
          params = {
            kind = "mru",
          },
        },
      })
    end)

    require("rc.utils").package_set("ddu_command", "mrw", function()
      require("rc.ddu").start({
        {
          name = "mr",
          params = {
            kind = "mrw",
          },
        },
      })
    end)

    require("rc.utils").package_set("ddu_command", "mrr", function()
      require("rc.ddu").start({
        {
          name = "mr",
          params = {
            kind = "mrr",
          },
        },
      })
    end)
'''

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
lua_add = '''
    vim.keymap.set("n", "q:", "<Cmd>Ddu command_history<CR>")

    local ddu = require("rc.ddu")

    require("rc.utils").package_set("ddu_command", "command_history", function()
      ddu.history_mapping()
      ddu.start({ "command_history" })
    end)
'''

[[plugins]]
repo = 'uga-rosa/ddu-source-search_history'
lua_add = '''
    vim.keymap.set("n", "q/", "<Cmd>Ddu search_history<CR>")

    local ddu = require("rc.ddu")

    require("rc.utils").package_set("ddu_command", "search_history", function()
      ddu.history_mapping()
      ddu.start({ "search_history" })
    end)
'''

[[plugins]]
repo = 'mikanIchinose/ddu-source-zenn'
lua_add = '''
    vim.keymap.set("n", "<Space>z", "<Cmd>Ddu zenn<CR>")

    require("rc.utils").package_set("ddu_command", "zenn", function()
      local zenn_root = vim.fs.normalize("~/zenn")
      require("rc.ddu").start({
        "zenn",
        sourceOptions = {
          zenn = {
            path = zenn_root,
            converters = {},
          },
        },
      })
    end)
'''

# Filters
[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'

[[plugins]]
repo = '~/plugin/ddu-filter-converter_devicon'

# Kinds
[[plugins]]
repo = 'Shougo/ddu-kind-file'
