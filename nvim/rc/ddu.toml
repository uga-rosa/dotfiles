[[plugins]]
repo = 'Shougo/ddu.vim'
lua_add = '''
    local ddu = require("rc.ddu")

    local lines = vim.opt.lines:get()
    local height, row = math.floor(lines * 0.8), math.floor(lines * 0.1)
    local columns = vim.opt.columns:get()
    local width, col = math.floor(columns * 0.8), math.floor(columns * 0.1)

    vim.fn["ddu#custom#patch_global"]({
      ui = "ff",
      uiParams = {
        ff = {
          startFilter = true,
          prompt = "> ",
          split = "floating",
          winHeight = height,
          winRow = row,
          winWidth = width,
          winCol = col,
          floatingBorder = "single",
          filterFloatingPosition = "top",
          autoAction = {
            name = "preview",
          },
          previewFloating = true,
          previewFloatingBorder = "single",
          previewSplit = "vertical",
          previewFloatingTitle = "Preview",
          previewWidth = math.floor(width / 2),
          highlights = {
            floating = "Normal",
            floatingBorder = "Normal",
          },
        },
      },
      sourceOptions = {
        _ = {
          ignoreCase = true,
          matchers = { "matcher_fzf" },
          sorters = {},
        },
      },
    })

    local function map(mode, lhs, rhs)
      vim.keymap.set(mode, lhs, rhs, { buffer = true, silent = true, nowait = true })
    end

    vim.api.nvim_create_autocmd("FileType", {
      pattern = "ddu-ff",
      callback = function()
        -- Highlight cursor line
        vim.opt_local.cursorline = true
        -- Close UI
        map("n", "<C-c>", ddu.call_action("quit"))
        -- Open file
        map("n", "<CR>", ddu.itemAction("open"))
        map("n", "<C-x>", ddu.itemAction("open", { command = "split" }))
        map("n", "<C-v>", ddu.itemAction("open", { command = "vsplit" }))
        map("n", "<C-t>", ddu.open_tab)
        -- Enter filter
        map("n", "i", ddu.call_action("openFilterWindow"))
      end,
    })

    vim.api.nvim_create_autocmd("FileType", {
      pattern = "ddu-ff-filter",
      callback = function()
        -- Close UI
        map({ "i", "n" }, "<C-c>", ddu.call_action("quit"))
        -- Close filter window
        map("n", "q", ddu.call_action("closeFilterWindow"))
        map("n", "<Esc>", ddu.call_action("closeFilterWindow"))
        -- Open file
        map("i", "<CR>", ddu.itemAction("open"))
        map("i", "<C-x>", ddu.itemAction("open", { command = "split" }))
        map("i", "<C-v>", ddu.itemAction("open", { command = "vsplit" }))
        map("i", "<C-t>", ddu.open_tab)
        -- Move cursor
        map("i", "<C-n>", ddu.execute("normal! j"))
        map("i", "<C-p>", ddu.execute("normal! k"))
      end,
    })

    vim.api.nvim_create_user_command("Ddu", function(args)
      local sub_command = args.args
      local f = require("ddu_command")[sub_command]
      if f then
        f()
      else
        vim.notify("Unknown sub command: " .. sub_command)
      end
    end, {
      nargs = 1,
      complete = function()
        return vim.tbl_keys(require("ddu_command"))
      end,
    })
'''

# UI
[[plugins]]
repo = 'Shougo/ddu-ui-ff'

# Sources
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
lua_add = '''
    require("rc.utils").package_set("ddu_command", "files", function()
      require("rc.ddu").start({
        "file_rec",
      })
    end)
'''

[[plugins]]
repo = 'shun/ddu-source-rg'
lua_add = '''
    require("rc.utils").package_set("ddu_command", "live_grep", function()
      local root = require("rc.utils").find_root()
      require("rc.ddu").start({
        "rg",
        name = "file#rg",
        sourceOptions = {
          rg = {
            path = root,
            volatile = true,
          },
        },
        uiParams = {
          ff = {
            ignoreEmpty = false,
            autoResize = false,
          },
        },
      })
    end)
'''

# Filters
[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'

# Kinds
[[plugins]]
repo = 'Shougo/ddu-kind-file'
