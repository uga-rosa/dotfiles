snippet env
	#!/usr/bin/env python
	$0
snippet im
	import ${1:package/module}$0
snippet fim
	from ${1:package/module} import ${2:names}$0
snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring}"""
		def __init__(self, ${4:arg}):
			$0
snippet fn_self
	def ${1:mname}(self, ${2:arg}):
		${3:pass}$0
snippet fn
	def ${1:fname}(${2:arg}):
		${3:pass}$0
snippet af
	async def ${1:fname}(${2:arg}):
		${3:pass}$0
snippet if
	if ${1:condition}:
		${2:pass}$0
snippet for
	for ${1:var} in ${2:iterable}:
		${3:pass}$0
snippet while
	while ${1:condition}:
		${2:pass}
snippet try
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:pass}$0
snippet trye
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:pass}
	else:
		${5:pass}$0
snippet tryf
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:pass}
	finally:
		${5:pass}$0
snippet tryef
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:pass}
	else:
		${5:pass}
	finally:
		${6:pass}$0
snippet s
	self.$0
snippet __
	__${1:init}__$0
snippet ifmain
	if __name__ == "__main__":
		${1:main()}$0
snippet lambda
	lambda ${1:arg}: ${2:expr}
snippet rt
	return
