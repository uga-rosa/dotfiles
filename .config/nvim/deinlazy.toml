[[plugins]]
repo = 'ibhagwan/fzf-lua'
depends = 'nvim-web-devicons'
on_cmd = 'FzfLua'
hook_add = '''
nnoremap <F1> <cmd>FzfLua builtin<CR>
nnoremap <leader>r <cmd>FzfLua resume<CR>
nnoremap <leader>f <cmd>FzfLua files<CR>
nnoremap <leader>b <cmd>FzfLua buffers<CR>
nnoremap <leader>o <cmd>FzfLua oldfiles<CR>
nnoremap <leader>h <cmd>FzfLua help_tags<CR>
nnoremap <leader>m <cmd>FzfLua man_pages<CR>
nnoremap <leader>gr <cmd>FzfLua live_grep<CR>
nnoremap <leader>/ <cmd>FzfLua blines<CR>
nnoremap <leader>gf <cmd>FzfLua git_files<CR>
nnoremap q: <cmd>FzfLua command_history<CR>
nnoremap q/ <cmd>FzfLua search_history<CR>

nnoremap <leader>i <cmd>FzfLua lsp_document_diagnostics<CR>
nnoremap <leader>I <cmd>FzfLua lsp_workspace_diagnostics<CR>
nnoremap <leader>a <cmd>FzfLua lsp_code_actions<CR>
nnoremap gd <cmd>lua require("fzf-lua").lsp_definitions({jump_to_single_result = true})<CR>
nnoremap gr <cmd>FzfLua lsp_references<CR>
'''
hook_source = '''
lua <<EOL
local fzf = require("fzf-lua")
local actions = require("fzf-lua.actions")

fzf.setup({
    keymap = {
        builtin = {
            ["<F3>"] = "toggle-preview-wrap",
            ["<F4>"] = "toggle-preview",
            ["<C-f>"] = "preview-page-down",
            ["<C-b>"] = "preview-page-up",
            ["<S-left>"] = "preview-page-reset",
        },
        fzf = {
            -- fzf '--bind=' options
            ["ctrl-u"] = "unix-line-discard",
            ["ctrl-a"] = "beginning-of-line",
            ["ctrl-e"] = "end-of-line",
            ["alt-a"] = "toggle-all",
            -- Only valid with fzf previewers (bat/cat/git/etc)
            ["f3"] = "toggle-preview-wrap",
            ["f4"] = "toggle-preview",
            ["ctrl-f"] = "preview-page-down",
            ["ctrl-b"] = "preview-page-up",
        },
    },
    file_icon_padding = " ",
    files = {
        actions = {
            ["ctrl-x"] = actions.file_split,
        },
    },
    git = {
        actions = {
            ["ctrl-x"] = actions.file_split,
        },
    },
})
EOL
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'

[[plugins]]
repo = 'David-Kunz/treesitter-unit'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['nvim-treesitter-textobjects', 'nvim-ts-rainbow', 'treesitter-unit']
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOL
local map = utils.map

require("nvim-treesitter.configs").setup({
    ensure_installed = "all",
    highlight = {
        enable = true,
    },
    textobjects = {
        select = {
            enable = true,
            lookahead = true,
            keymaps = {
                ["ib"] = "@block.inner",
                ["ab"] = "@block.outer",
                ["c"] = "@comment.outer",
                ["if"] = "@function.inner",
                ["af"] = "@function.outer",
                ["il"] = "@loop.inner",
                ["al"] = "@loop.outer",
            },
        },
        swap = {
            enable = true,
            swap_next = {
                ["<M-s>"] = "@parameter.inner",
            },
            swap_previous = {
                ["<M-S-s>"] = "@parameter.inner",
            },
        },
    },
    rainbow = {
        enable = true,
        extend_mode = true,
        max_file_lines = nil,
    },
})
EOL

xmap iu :lua require("treesitter-unit").select()<CR> 
xmap au :lua require("treesitter-unit").select(true)<CR> 
omap iu <cmd>lua require("treesitter-unit").select()<CR>
omap au <cmd>lua require("treesitter-unit").select(true)<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = ['TSPlaygroundToggle', 'TSHighlightCapturesUnderCursor']

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'BufRead'
hook_source = '''
lua <<EOL
require("gitsigns").setup({
    keymaps = {
        noremap = true,

        ["n ]g"] = {
            expr = true,
            "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'",
        },
        ["n [g"] = {
            expr = true,
            "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'",
        },

        ["n <leader>gp"] = '<cmd>lua require"gitsigns".preview_hunk()<CR>',

        -- Text objects
        ["o ih"] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>',
        ["x ih"] = ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>',
    },
})
EOL
'''

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
on_cmd = 'LazyGit'
hook_add = '''
let g:lazygit_floating_window_use_plenary = v:true
nnoremap <leader>l <cmd>LazyGit<CR>
'''

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vim-quickrun-neovim-job'
on_cmd = 'QuickRun'
hook_add = '''
let g:quickrun_config = {
\       '_': {
\           'runner': 'neovim_job',
\           'outputter': 'error',
\           'outputter/error/success': 'buffer',
\           'outputter/error/error': 'quickfix',
\           'outputter/buffer/opener': 'botright 10sp',
\           'outputter/buffer/close_on_empty': v:true,
\       },
\       'lua': {
\           'command': ':luafile',
\           'exec': '%C %S',
\           'runner': 'vimscript',
\       }
\   }

nnoremap @r <cmd>QuickRun<CR>
augroup quickrun_quit
    au!
    au BufEnter quickrun://output nnoremap <buffer><nowait> q <cmd>q<CR>
augroup END
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { n = [ 'ys', 'yss', 'yS', 'ds', 'dss', 'cs', 'css' ], x = [ 'S' ] }
hook_source = '''
runtime macros/sandwich/keymap/surround.vim
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
let g:lexima_no_default_rules = 1
call lexima#set_default_rules()

call lexima#add_rule({'char': '<CR>', 'at': '\\\s.*\%#$', 'input': '<CR><Bslash> ', 'filetype': 'vim'})
call lexima#add_rule({'char': '<CR>', 'at': '{\%#$}', 'input': '<CR><Bslash> ', 'input_after': '<CR><Bslash> ', 'filetype': 'vim'})
call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'markdown'})
call lexima#add_rule({'char': '$', 'at': '\%#$', 'leave': 1, 'filetype': 'markdown'})
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = { n = '<Plug>(operator-replace)' }
hook_add = '''
nmap r <Plug>(operator-replace)
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_add = '''
lua <<EOL
local map = utils.map
map({"n", "x"}, ";", "<Plug>(eft-repeat)")
map({"n", "x", "o"}, "f", "<Plug>(eft-f)")
map({"n", "x", "o"}, "F", "<Plug>(eft-F)")
map({"n", "x", "o"}, "t", "<Plug>(eft-t)")
map({"n", "x", "o"}, "T", "<Plug>(eft-T)")
EOL
'''

[[plugins]]
repo = 'hrsh7th/vim-searchx'
on_func = 'searchx#'
hook_add = '''
lua <<EOL
local map = utils.map
map({"n", "x"}, "/", "<cmd>call searchx#start({'dir': 1})<CR>")
map({"n", "x"}, "?", "<cmd>call searchx#start({'dir': 0})<CR>")
map({"n", "x"}, "n", "<cmd>call searchx#next()<CR>")
map({"n", "x"}, "N", "<cmd>call searchx#prev()<CR>")
map("c", "<C-j>", "<cmd>call searchx#next()<CR>")
map("c", "<C-k>", "<cmd>call searchx#prev()<CR>")
map({"n", "c"}, "<C-l>", "<cmd>call searchx#clear()<CR>")
EOL
let g:searchx = {}
let g:searchx.auto_accept = v:true
let g:searchx.scrolloff = &scrolloff
let g:searchx.scrolltime = 0
let g:searchx.nohlsearch = {}
let g:searchx.nohlsearch.jump = v:true
let g:searchx.markers = split('ASDFGHJKL:QWERTYUIOP', '.\zs')
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-smart-search)'
hook_add = '''
nmap <M-o> <Plug>(openbrowser-smart-search)
xmap <M-o> <Plug>(openbrowser-smart-search)
let g:openbrowser_browser_commands = [
\       {'name': 'chrome.exe', 'args': ['{browser}', '{uri}']}
\   ]
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = 'cd app && yarn install'
on_ft = 'markdown'
hook_source = '''
let g:mkdp_refresh_slow = 1
nnoremap <leader>p <cmd>MarkdownPreview<CR>
'''
