[[plugins]]
repo = 'glepnir/lspsaga.nvim'
hook_source = '''
lua <<EOL
require("lspsaga").init_lsp_saga({
    diagnostic_header = { " ", " ", " ", " " },
    rename_action_quit = { "<C-c>", "<Esc>" },
})
EOL
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
hook_source = '''
lua require("fidget").setup({})
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'

[[plugins]]
repo = 'junnplus/nvim-lsp-setup'

[[plugins]]
repo = 'uga-rosa/lua-dev.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['lspsaga.nvim', 'fidget.nvim', 'nvim-lsp-installer', 'nvim-lsp-setup', 'lua-dev.nvim', 'cmp-nvim-lsp']
on_ft = ['lua', 'go', 'python', 'sh', 'bash', 'rust', 'vim', 'javascript', 'typescript', 'nim']
hook_source = '''
command Format lua vim.lsp.buf.formatting_sync()

augroup lspinfo_close
    au!
    au FileType lspinfo nnoremap <buffer><nowait> q <Cmd>q<CR>
augroup END

lua <<EOL
require("nvim-lsp-setup").setup({
    installer = {
        ensure_installed = {
            "sumneko_lua",
            "gopls",
            "pyright",
            "bashls",
            "rust_analyzer",
            "vimls",
            "tsserver",
            "denols",
            "nimls",
        },
        automatic_installation = true,
    },
    default_mappings = false,
    mappings = {
        K = "Lspsaga hover_doc",
        ["[d"] = "Lspsaga diagnostic_jump_prev",
        ["]d"] = "Lspsaga diagnostic_jump_next",
        ["<leader>n"] = "Lspsaga rename",
        ["<leader>x"] = "Lspsaga code_action",
        ["<C-f>"] = "lua require('lspsaga.action').smart_scroll_with_saga(1)",
        ["<C-b>"] = "lua require('lspsaga.action').smart_scroll_with_saga(-1)",
    },
    capabilities = capabilities,
    servers = {
        sumneko_lua = require("lua-dev").setup({
            library = {
                vimruntime = true,
                types = true,
                plugins = { "plenary.nvim", "LuaSnip" },
            },
            snippet = false,
        }),
		gopls = {},
        pyright = {},
		bashls = {},
		rust_analyzer = {},
		vimls = {},
        tsserver = {},
		denols = {},
        nimls = {},
    },
})
EOL
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = 'plenary.nvim'
on_ft = ['lua', 'sh', 'json', 'python', 'teal']
hook_source = '''
lua <<EOL
local null = require("null-ls")
local b = null.builtins

null.setup({
    sources = {
        function()
            local utils = require("null-ls.utils").make_conditional_utils()
            if utils.root_has_file("stylua.toml") then
                return b.formatting.stylua
            elseif utils.root_has_file(".stylua.toml") then
                return b.formatting.stylua.with({
                    extra_args = { "--config-path", "./.stylua.toml" },
                })
            else
                return b.formatting.stylua.with({
                    extra_args = { "--config-path", vim.fn.expand("~/.config/stylua.toml") },
                })
            end
        end,
        b.formatting.shfmt.with({
            extra_args = { "-ci", "-s", "-bn", "-i", "4" },
        }),
        b.formatting.fixjson,
        b.formatting.black,
        b.diagnostics.teal,
    },
})
EOL
'''
