[[plugins]]
repo = 'hrsh7th/nvim-cmp'
depends = 'LuaSnip'
on_event = 'InsertEnter'
hook_source = '''
lua <<EOL
local cmp = require("cmp")
local luasnip = require("luasnip")
local feedkey = utils.feedkey

local lspkind = {
    Text = "",
    Method = "",
    Function = "",
    Constructor = "",
    Field = "ﰠ",
    Variable = "",
    Class = "ﴯ",
    Interface = "",
    Module = "",
    Property = "ﰠ",
    Unit = "塞",
    Value = "",
    Enum = "",
    Keyword = "",
    Snippet = "",
    Color = "",
    File = "",
    Reference = "",
    Folder = "",
    EnumMember = "",
    Constant = "",
    Struct = "פּ",
    Event = "",
    Operator = "",
    TypeParameter = "",
}

local function cmp_down()
    if luasnip.choice_active() then
        cmp.close()
        luasnip.change_choice(1)
    elseif cmp.visible() then
        cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
    else
        feedkey("<C-n>")
    end
end

local function cmp_up()
    if luasnip.choice_active() then
        cmp.close()
        luasnip.change_choice(-1)
    elseif cmp.visible() then
        cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
    else
        feedkey("<C-p>")
    end
end

cmp.setup({
    snippet = {
        expand = function(args)
            luasnip.lsp_expand(args.body)
        end,
    },
    preselect = cmp.PreselectMode.None,
    completion = {
        get_trigger_characters = function(trigger_characters)
            return vim.tbl_filter(function(char)
                return char ~= " "
            end, trigger_characters)
        end,
    },
    formatting = {
        format = function(entry, vim_item)
            vim_item.kind = lspkind[vim_item.kind] .. " " .. vim_item.kind
            vim_item.menu = ({
                buffer = "[Buffer]",
                path = "[Path]",
                nvim_lsp = "[LSP]",
                nvim_lsp_signature_help = "[SignHelp]",
                luasnip = "[LuaSnip]",
                dictionary = "[Dict]",
            })[entry.source.name]
            vim_item.dup = ({
                buffer = 0,
                dictionary = 0,
                nvim_lua = 0,
            })[entry.source.name] or 1
            return vim_item
        end,
    },
    sorting = {
        comparators = {
            cmp.config.compare.offset,
            cmp.config.compare.score,
            function(entry1, entry2)
                local _, entry1_under = entry1.completion_item.label:find("^_+")
                local _, entry2_under = entry2.completion_item.label:find("^_+")
                entry1_under = entry1_under or 0
                entry2_under = entry2_under or 0
                if entry1_under < entry2_under then
                    return true
                elseif entry1_under > entry2_under then
                    return false
                end
            end,
            cmp.config.compare.recently_used,
            cmp.config.compare.kind,
            cmp.config.compare.sort_text,
            cmp.config.compare.length,
            cmp.config.compare.order,
        },
    },
    mapping = {
        ["<C-space>"] = cmp.mapping(function()
            if cmp.visible() then
                cmp.close()
            else
                cmp.complete()
            end
        end, {
            "i",
            "c",
        }),
        ["<C-n>"] = cmp.mapping({
            i = cmp_down,
            s = cmp_down,
            c = function()
                if cmp.visible() then
                    cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
                else
                    feedkey("<C-n>")
                end
            end,
        }),
        ["<C-p>"] = cmp.mapping({
            i = cmp_up,
            s = cmp_up,
            c = function()
                if cmp.visible() then
                    cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert })
                else
                    feedkey("<C-p>")
                end
            end,
        }),
        ["<CR>"] = cmp.mapping.confirm({ select = true }),
    },
    sources = {
        { name = "luasnip", group_index = 1 },
        { name = "nvim_lsp", group_index = 1 },
        { name = "nvim_lsp_signature_help", group_index = 1 },
        {
            name = "buffer",
            option = {
                get_bufnrs = function()
                    local bufs = {}
                    for _, win in ipairs(vim.api.nvim_list_wins()) do
                        bufs[vim.api.nvim_win_get_buf(win)] = true
                    end
                    return vim.tbl_keys(bufs)
                end,
            },
            group_index = 2,
        },
        {
            name = "dictionary",
            keyword_length = 2,
            priority = 1,
            group_index = 2,
        },
        { name = "path", group_index = 2 },
    },
})

cmp.setup.cmdline("/", {
    sources = {
        { name = "buffer" },
    },
})

cmp.setup.cmdline(":", {
    sources = {
        { name = "cmdline" },
        { name = "path" },
    },
})

local api = vim.api

local function get_cursor(bufnr)
    local row, col = unpack(api.nvim_win_get_cursor(bufnr or 0))
    return row - 1, col
end

local function get_line(bufnr, lnum)
    return api.nvim_buf_get_lines(bufnr or 0, lnum, lnum + 1, false)[1] or ""
end

local function get_current_line(bufnr)
    local row = unpack(api.nvim_win_get_cursor(0)) or 1
    return get_line(bufnr, row - 1)
end

cmp.event:on("confirm_done", function(evt)
    local opt = {
        map_char = { tex = "" },
        kinds = {
            cmp.lsp.CompletionItemKind.Method,
            cmp.lsp.CompletionItemKind.Function,
        },
    }

    local entry = evt.entry
    local line = get_current_line()
    local _, col = get_cursor()
    local prev_char = line:sub(col, col)
    local next_char = line:sub(col + 1, col + 1)
    local item = entry:get_completion_item()

    local char = opt.map_char[vim.bo.filetype] or "("

    if
        char == ""
        or prev_char == char
        or next_char == char
        or (not vim.tbl_contains(opt.kinds, item.kind))
        or (item.textEdit and item.textEdit.newText and item.textEdit.newText:match("[%(%[]"))
        or (item.insertText and item.insertText:match("[%(%[]"))
    then
        return
    end

    feedkey(char, "i")
end)
EOL
'''

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'

[[plugins]]
repo = '~/plugin/cmp-dictionary'
depends = 'nvim-cmp'
on_source = 'nvim-cmp'
hook_source = '''
lua <<EOL
local ok, dict = pcall(require, "cmp_dictionary")
if ok then
    dict.setup({
        dic = {
            ["*"] = "/usr/share/dict/words",
            ["autohotkey"] = "~/dotfiles/doc/ahk.dict",
        },
        exact = 2,
        first_case_insensitive = true,
    })
    dict.update()
end
EOL
'''

[[plugins]]
# repo = 'L3MON4D3/LuaSnip'
repo = '~/plugin/LuaSnip'
on_event = 'VimEnter'
hook_source = '''
lua <<EOL
local map = utils.map

map({"i", "s"}, "<C-j>", "<Plug>luasnip-jump-next")
map({"i", "s"}, "<C-k>", "<Plug>luasnip-jump-prev")

require("luasnip.loaders.from_snipmate").lazy_load({
    paths = "~/.config/nvim/snippets"
})

require("luasnip").filetype_extend("all", { "_" })

local current_nsid = vim.api.nvim_create_namespace("LuaSnipChoiceListSelections")
local current_win = nil

local function window_for_choiceNode(choiceNode)
    local buf = vim.api.nvim_create_buf(false, true)
    local buf_text = {}
    local row_selection = 0
    local row_offset = 0
    local text
    for _, node in ipairs(choiceNode.choices) do
        text = node:get_docstring()
        -- find one that is currently showing
        if node == choiceNode.active_choice then
            -- current line is starter from buffer list which is length usually
            row_selection = #buf_text
            -- finding how many lines total within a choice selection
            row_offset = #text
        end
        vim.list_extend(buf_text, text)
    end

    vim.api.nvim_buf_set_text(buf, 0, 0, 0, 0, buf_text)
    local w, h = vim.lsp.util._make_floating_popup_size(buf_text)

    -- adding highlight so we can see which one is been selected.
    local extmark = vim.api.nvim_buf_set_extmark(
        buf,
        current_nsid,
        row_selection,
        0,
        { hl_group = "incsearch", end_line = row_selection + row_offset }
    )

    -- shows window at a beginning of choiceNode.
    local win = vim.api.nvim_open_win(buf, false, {
        relative = "win",
        width = w,
        height = h,
        bufpos = choiceNode.mark:pos_begin_end(),
        style = "minimal",
        border = "rounded",
    })

    -- return with 3 main important so we can use them again
    return { win_id = win, extmark = extmark, buf = buf }
end

_G._ls_popup = {}

function _ls_popup.open(choiceNode)
    -- build stack for nested choiceNodes.
    if current_win then
        vim.api.nvim_win_close(current_win.win_id, true)
        vim.api.nvim_buf_del_extmark(current_win.buf, current_nsid, current_win.extmark)
    end
    local create_win = window_for_choiceNode(choiceNode)
    current_win = {
        win_id = create_win.win_id,
        prev = current_win,
        node = choiceNode,
        extmark = create_win.extmark,
        buf = create_win.buf,
    }
end

function _ls_popup.close()
    vim.api.nvim_win_close(current_win.win_id, true)
    vim.api.nvim_buf_del_extmark(current_win.buf, current_nsid, current_win.extmark)
    -- now we are checking if we still have previous choice we were in after exit nested choice
    current_win = current_win.prev
    if current_win then
        -- reopen window further down in the stack.
        local create_win = window_for_choiceNode(current_win.node)
        current_win.win_id = create_win.win_id
        current_win.extmark = create_win.extmark
        current_win.buf = create_win.buf
    end
end

function _ls_popup.update(choiceNode)
    vim.api.nvim_win_close(current_win.win_id, true)
    vim.api.nvim_buf_del_extmark(current_win.buf, current_nsid, current_win.extmark)
    local create_win = window_for_choiceNode(choiceNode)
    current_win.win_id = create_win.win_id
    current_win.extmark = create_win.extmark
    current_win.buf = create_win.buf
end
EOL

augroup choice_popup
    au!
    au User LuasnipChoiceNodeEnter lua _ls_popup.open(require("luasnip").session.event_node)
    au User LuasnipChoiceNodeLeave lua _ls_popup.close()
    au User LuasnipChangeChoice lua _ls_popup.update(require("luasnip").session.event_node)
augroup END
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'markdown'})
call lexima#add_rule({'char': '$', 'at': '\%#$', 'leave': 1, 'filetype': 'markdown'})
'''
